public static int minimax(Board board, int depth, boolean maximizingPlayer) {

        /* ---------- hard stop: search horizon reached ------------------------- */
        if (depth == 0) return Eval.evaluate(board);

        long zobristHash = ZobristHashing.computeHash(board);
        TranspositionTable.TTEntry ttEntry = transpositionTable.retrieve(zobristHash);

        if (ttEntry != null && ttEntry.depth >= depth) {
            ttHits++;
            if (ttEntry.entryType == TranspositionTable.EXACT_SCORE) {
                return ttEntry.score;
            }
        }

        /* ---------- game end check (the side that just moved) ------------------ */
        Player prev = (board.getCurrentPlayer() == Player.RED) ? Player.BLUE : Player.RED;
        if (Board.checkplayerWon(board, prev)) return Eval.evaluate(board);

        /* ---------- generate legal moves --------------------------------------- */
        List<MovePair> moves = MoveGenerator.generateAllLegalMoves(board);
        if (moves.isEmpty())                           // stalemate or no moves
            return Eval.evaluate(board);

        /* ---------- order moves to improve search efficiency ------------------ */
        List<MovePair> orderedMoves = MoveOrdering.orderMoves(moves, board, maximizingPlayer);

        /* ---------- recursive descent ------------------------------------------ */
        int best;
        MovePair bestMoveForTT = null;
        if (maximizingPlayer) {
            best = Integer.MIN_VALUE;
            for (MovePair m : orderedMoves) {
                Board child = Board.makeMove(m, board.copy());  // safe copy
                int score = minimax(child, depth - 1, false);
                if (score > best) {
                    best = score;
                    bestMoveForTT = m;
                }
            }
        } else {                                       // minimizing player
            best = Integer.MAX_VALUE;
            for (MovePair m : orderedMoves) {
                Board child = Board.makeMove(m, board.copy());
                int score = minimax(child, depth - 1, true);
                if (score < best) {
                    best = score;
                    bestMoveForTT = m;
                }
            }
        }
        transpositionTable.store(zobristHash, best, depth, TranspositionTable.EXACT_SCORE, bestMoveForTT);
        return best;
    }